#!/bin/bash

case `uname` in
  CYGWIN*) cygwin=1
	   OUT=a.exe
            ;;
        *) cygwin=""
	   OUT=a.out
            ;;
esac


BTYACC=../btyacc
test ${CC:=gcc}
test ${CXX:=g++}

while expr "x$1" : x- >/dev/null; do
    case $1 in
    -*)
    	echo >&2 "Unknown argument $1"
	;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    set *.y
fi

rm -rf faillog.txt
pass=0
fail=0
for f in "$@"; do
    rm -f .fail .run
    build=0
    echo -n "$f"
    sed -n '/\[test\]/s/.*\[test\] *//p' <$f | while read cmd rest; do
	touch .run
	case $cmd in
	btyacc)
	    if $BTYACC $rest $f >tmp.txt 2>&1; then
		build=1
	    else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> $BTYACC $rest $f" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail
		build=0
	    fi
	    ;;
	cc)
	    if [ $build -lt 1 ]; then continue; fi
	    if $CC $(basename $f .y).tab.c $rest >tmp.txt 2>&1; then
		build=2
	    else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> $CC $(basename $f .y).tab.c $rest" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail;
		build=1
	    fi
	    ;;
	c++)
	    if [ $build -lt 1 ]; then continue; fi
	    if $CXX $(basename $f .y).tab.c $rest >tmp.txt 2>&1; then
		build=2
	    else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> $CC $(basename $f .y).tab.c $rest" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail;
		build=1
	    fi
	    ;;
	input)
	    if [ $build -lt 2 ]; then continue; fi
	    if echo "$rest" | ./$OUT >tmp.txt 2>&1; then true; else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> echo \"$rest\" | ./$OUT" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail;
	    fi
	    ;;
	input-file)
	    if [ $build -lt 2 ]; then continue; fi
	    if ./$OUT <$rest >tmp.txt 2>&1; then true; else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> echo \"$rest\" | ./$OUT" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail;
	    fi
	    ;;
	input-fail)
	    if [ $build -lt 2 ]; then continue; fi
	    if echo "$rest" | ./$OUT >tmp.txt 2>&1; then
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		echo "> echo \"$rest\" | ./$OUT" >> faillog.txt
		cat tmp.txt >>faillog.txt
		touch .fail;
	    fi
	    ;;
	match)
	    if [ $build -lt 2 ]; then continue; fi
	    echo "$rest" >expected.txt
	    if diff -q expected.txt tmp.txt; then true; else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		diff -u expected.txt tmp.txt >>faillog.txt
		touch .fail;
	    fi
	    ;;
	match-file)
	    if [ $build -lt 2 ]; then continue; fi
	    if diff -q $rest tmp.txt; then true; else
		if [ ! -e .fail ]; then echo "$f:" >>faillog.txt; fi
		diff -u $rest tmp.txt >>faillog.txt
		touch .fail;
	    fi
	    ;;
	*)
	    echo >&1 "Unknown testing command $cmd"
	esac;
    done
    if [ $? -eq 130 ]; then
	echo " INTERRUPT"
	break
    elif [ -e .fail ]; then
	echo " FAIL"
	let fail++
    elif [ ! -e .run ]; then
	echo "  no commands"
    else
	echo " PASS"
	let pass++
    fi
done

rm -f .run .fail tmp.txt

if [ $fail -gt 0 ]; then
    echo "$fail tests FAILED, $pass tests PASSED"
    exit 1
else
    echo "$pass tests PASSED"
fi
